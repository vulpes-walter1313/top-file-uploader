// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  firstName String   @db.VarChar(30)
  lastName  String   @db.VarChar(30)
  email     String   @unique @db.VarChar(320)
  password  String
  isAdmin   Boolean  @default(false)
  folders   Folder[]
  files     File[]
  shares    Share[]
}

model Folder {
  id          String   @id @default(uuid())
  name        String   @db.VarChar(50)
  description String   @db.VarChar(256)
  createdBy   String
  owner       User     @relation(fields: [createdBy], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt   DateTime @default(now()) @db.Timestamptz()
  updatedAt   DateTime @default(now()) @db.Timestamptz()
  files       File[]
  shares      Share[]
}

model File {
  id          String  @id @default(uuid())
  fileUrl     String  @unique
  name        String  @db.VarChar(64)
  description String? @db.VarChar(256)
  extName     String  @db.VarChar(24)
  fileType    String  @db.VarChar(24)
  size        Int
  createdBy   String
  owner       User    @relation(fields: [createdBy], references: [id], onDelete: Cascade, onUpdate: Cascade)
  folderId    String
  inFolder    Folder  @relation(fields: [folderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt   DateTime @default(now()) @db.Timestamptz()
  updatedAt   DateTime @default(now()) @db.Timestamptz()
}

model Share {
  id           String   @id @default(uuid())
  folderId     String
  folderShared Folder   @relation(fields: [folderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt    DateTime @default(now()) @db.Timestamptz()
  expiresAt    DateTime @db.Timestamptz()
  createdBy    String
  owner        User     @relation(fields: [createdBy], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}
